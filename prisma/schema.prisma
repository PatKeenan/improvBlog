// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 Int            @id @default(autoincrement())
  user_uuid          String         @unique @default(uuid())
  createdAt          DateTime       @default(now())
  name               String?
  email              String?        @unique
  emailVerified      DateTime?
  image              String?
  accounts           Account[]
  sessions           Session[]
  posts              Post[]
  contributions      Contribution[]
  likedContributions Like[]
  profile            Profile?
  role               Role           @default(USER)
}

model Like {
  id             Int          @id @default(autoincrement())
  createdAt      DateTime     @default(now())
  likerId        Int
  user           User         @relation(fields: [likerId], references: [id], onDelete: Cascade)
  contributionId Int
  contribution   Contribution @relation(fields: [contributionId], references: [id], onDelete: Cascade)
  blockId        Int
  block          Block        @relation(fields: [blockId], references: [id], onDelete: Cascade)
  postId         Int
  post           Post         @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Profile {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  updateAt     DateTime @default(now())
  profile_uuid String   @unique @default(uuid())
  social       Json?
  bio          String?
  profilePic   String?
  userId       Int      @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  rank         Int      @default(0)
}

model Post {
  id                 Int            @id @default(autoincrement())
  post_uuid          String         @unique @default(uuid())
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  authorId           Int
  author             User           @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  private            Boolean        @default(false)
  privateMemberIds   Int[] // will autofill with current participants
  blocks             Block[]
  contributions      Contribution[]
  title              String         @unique @db.VarChar(255)
  plot               String
  slug               String
  likedContributions Like[]
}

model Block {
  id                 Int            @id @default(autoincrement())
  block_uuid         String         @unique @default(uuid())
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  postId             Int
  frozen             Boolean        @default(false)
  Post               Post           @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  contributions      Contribution[]
  likedContributions Like[]
}

model Contribution {
  id                Int      @id @default(autoincrement())
  contribution_uuid String   @unique @default(uuid())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  authorId          Int
  author            User     @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  content           String
  blockId           Int
  block             Block    @relation(fields: [blockId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId            Int
  Post              Post     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  likes             Like[]
}

enum Role {
  USER
  ADMIN
  SUPER_USER
}
